// Disjoint Set :- 
#include<bits/stdc++.h>
using namespace std;
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
using namespace __gnu_pbds;
template<class T> using oset = tree<T, null_type, less<T>, rb_tree_tag,tree_order_statistics_node_update>;
#define int long long
#define mod 1000000007
#define mod2 998244353
int modularBinaryExponentiation(int base
/*in a/b write b in base*/ ,
int exponent/*write mod-b here*/)
{
   if(exponent == 0)return 1;
   int result = modularBinaryExponentiation(base , exponent/2) ;
   if(exponent%2 == 1){
    return (((result*result)%mod)*base)%mod;
   }
   else return (result*result)%mod ;
}
void setIO(string prob) {
	freopen((prob + ".in").c_str(), "r", stdin);
	freopen((prob + ".out").c_str(), "w", stdout);
}
class DisjointSet{
    vector<int>rank ,parent , size;
public:
    DisjointSet(int n){
        rank.resize(n+1 , 0);
        parent.resize(n+1);
        size.resize(n+1) ;
        for(int i = 0 ;i<=n ;i++){
            parent[i] = i;
            size[i] = 1;
        }
    }
    int findUPar(int node){
        if(node == parent[node]){
           return node ;
        }
        return parent[node] = findUPar(parent[node]);
    }
    void unionByRank(int u , int v){
        int ulp_u = findUPar(u);
        int ulp_v = findUPar(v);
        if(ulp_u == ulp_v)return;
        if(rank[ulp_u]<rank[ulp_v]){
            parent[ulp_u] = ulp_v;
        }
        else{
            parent[ulp_v] = ulp_u ;
            rank[ulp_u]++;
        }
    }
    void unionBySize(int u , int v ){
        int ulp_u = findUPar(u);
        int ulp_v = findUPar(v) ;
        if(ulp_u == ulp_v)return ;
        if(size[ulp_u]<size[ulp_v]){
            parent[ulp_u] = ulp_v ;
            size[ulp_v]+=size[ulp_u];
        }
        else{
            parent[ulp_v] = ulp_u;
            size[ulp_u]+=size[ulp_v] ;
        }
    }
};
void solve(){
    DisjointSet ds(7);
    ds.unionByRank(1 ,2) ;
    ds.unionByRank(2 , 3);
    ds.unionByRank(4 ,5 );
    ds.unionByRank(6, 7);
    ds.unionByRank(5 , 6);
    if(ds.findUPar(3) == ds.findUPar(7)){
        cout<<"same"<<endl ;
    }
    else cout<<"Not same"<<endl;
    ds.unionByRank(3 ,7);
        if(ds.findUPar(3) == ds.findUPar(7)){
        cout<<"same"<<endl ;
    }
    else cout<<"Not same"<<endl;
}
int32_t main(){

  ios_base::sync_with_stdio(false);
  cin.tie(NULL);
  int t ;cin>>t;
  while(t--)
  solve() ;
  return 0 ;
}
